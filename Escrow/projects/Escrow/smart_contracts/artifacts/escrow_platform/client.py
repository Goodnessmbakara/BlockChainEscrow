# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "start_transaction(string,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "make_payment(pay,address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_refund(string)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_funds_from_escrow(address,string,address,bool)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "request_invoice_financing(address,string)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZXNjcm93X3BsYXRmb3JtLmNvbnRyYWN0LkVzY3Jvd1BsYXRmb3JtLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93X3BsYXRmb3JtL2NvbnRyYWN0LnB5OjE4OAogICAgLy8gY2xhc3MgRXNjcm93UGxhdGZvcm0oQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "invoice_id": {
                    "type": "bytes",
                    "key": "invoice_id"
                },
                "total_products_amount": {
                    "type": "uint64",
                    "key": "total_products_amount"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "EscrowPlatform",
        "methods": [
            {
                "name": "start_transaction",
                "args": [
                    {
                        "type": "string",
                        "name": "invoice_id",
                        "desc": "The invoice id to use to initiate the transaction"
                    },
                    {
                        "type": "uint64",
                        "name": "total_products_amount",
                        "desc": "The total amount of algos charge by the seller"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Creates a new transactions"
            },
            {
                "name": "make_payment",
                "args": [
                    {
                        "type": "pay",
                        "name": "buyer_payment",
                        "desc": "The payment transfer to the escrow in microalgos"
                    },
                    {
                        "type": "address",
                        "name": "company_address"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The total amount transferred by the buyer"
                },
                "desc": "Buyers makes payment to the escrow"
            },
            {
                "name": "claim_refund",
                "args": [
                    {
                        "type": "string",
                        "name": "shipping_status",
                        "desc": "API endpoint from the shipping company"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The amount of MicroAlgos refunded."
                },
                "desc": "Refund a buyer if the shipping is False"
            },
            {
                "name": "withdraw_funds_from_escrow",
                "args": [
                    {
                        "type": "address",
                        "name": "buyer_account",
                        "desc": "The buyer's address"
                    },
                    {
                        "type": "string",
                        "name": "shipping_status",
                        "desc": "comfirming from the shipping company if the product is delievered"
                    },
                    {
                        "type": "address",
                        "name": "company_address",
                        "desc": "The address to send charges to"
                    },
                    {
                        "type": "bool",
                        "name": "is_finance"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "deletes the buyer's escrow and transfers its balance to the application creator"
            },
            {
                "name": "request_invoice_financing",
                "args": [
                    {
                        "type": "address",
                        "name": "buyer_account",
                        "desc": "The buyer's address"
                    },
                    {
                        "type": "string",
                        "name": "shipping_status",
                        "desc": "comfirming from the shipping company if the product is shipped"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "pays the seller some percentage of Algo's"
            }
        ],
        "networks": {},
        "desc": "\n    A Smart contracts for Decentralized Escrow management\n    "
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class MakePaymentArgs(_ArgsBase[int]):
    """Buyers makes payment to the escrow"""

    buyer_payment: TransactionWithSigner
    """The payment transfer to the escrow in microalgos"""
    company_address: str

    @staticmethod
    def method() -> str:
        return "make_payment(pay,address)uint64"


@dataclasses.dataclass(kw_only=True)
class ClaimRefundArgs(_ArgsBase[int]):
    """Refund a buyer if the shipping is False"""

    shipping_status: str
    """API endpoint from the shipping company"""

    @staticmethod
    def method() -> str:
        return "claim_refund(string)uint64"


@dataclasses.dataclass(kw_only=True)
class WithdrawFundsFromEscrowArgs(_ArgsBase[int]):
    """deletes the buyer's escrow and transfers its balance to the application creator"""

    buyer_account: str
    """The buyer's address"""
    shipping_status: str
    """comfirming from the shipping company if the product is delievered"""
    company_address: str
    """The address to send charges to"""
    is_finance: bool

    @staticmethod
    def method() -> str:
        return "withdraw_funds_from_escrow(address,string,address,bool)uint64"


@dataclasses.dataclass(kw_only=True)
class RequestInvoiceFinancingArgs(_ArgsBase[int]):
    """pays the seller some percentage of Algo's"""

    buyer_account: str
    """The buyer's address"""
    shipping_status: str
    """comfirming from the shipping company if the product is shipped"""

    @staticmethod
    def method() -> str:
        return "request_invoice_financing(address,string)uint64"


@dataclasses.dataclass(kw_only=True)
class StartTransactionArgs(_ArgsBase[None]):
    """Creates a new transactions"""

    invoice_id: str
    """The invoice id to use to initiate the transaction"""
    total_products_amount: int
    """The total amount of algos charge by the seller"""

    @staticmethod
    def method() -> str:
        return "start_transaction(string,uint64)void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.invoice_id = ByteReader(typing.cast(bytes, data.get(b"invoice_id")))
        self.total_products_amount = typing.cast(int, data.get(b"total_products_amount"))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def make_payment(
        self,
        *,
        buyer_payment: TransactionWithSigner,
        company_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Buyers makes payment to the escrow
        
        Adds a call to `make_payment(pay,address)uint64` ABI method
        
        :param TransactionWithSigner buyer_payment: The payment transfer to the escrow in microalgos
        :param str company_address: The `company_address` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = MakePaymentArgs(
            buyer_payment=buyer_payment,
            company_address=company_address,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def claim_refund(
        self,
        *,
        shipping_status: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Refund a buyer if the shipping is False
        
        Adds a call to `claim_refund(string)uint64` ABI method
        
        :param str shipping_status: API endpoint from the shipping company
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ClaimRefundArgs(
            shipping_status=shipping_status,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_funds_from_escrow(
        self,
        *,
        buyer_account: str,
        shipping_status: str,
        company_address: str,
        is_finance: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """deletes the buyer's escrow and transfers its balance to the application creator
        
        Adds a call to `withdraw_funds_from_escrow(address,string,address,bool)uint64` ABI method
        
        :param str buyer_account: The buyer's address
        :param str shipping_status: comfirming from the shipping company if the product is delievered
        :param str company_address: The address to send charges to
        :param bool is_finance: The `is_finance` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawFundsFromEscrowArgs(
            buyer_account=buyer_account,
            shipping_status=shipping_status,
            company_address=company_address,
            is_finance=is_finance,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def request_invoice_financing(
        self,
        *,
        buyer_account: str,
        shipping_status: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """pays the seller some percentage of Algo's
        
        Adds a call to `request_invoice_financing(address,string)uint64` ABI method
        
        :param str buyer_account: The buyer's address
        :param str shipping_status: comfirming from the shipping company if the product is shipped
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RequestInvoiceFinancingArgs(
            buyer_account=buyer_account,
            shipping_status=shipping_status,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_start_transaction(
        self,
        *,
        invoice_id: str,
        total_products_amount: int,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Creates a new transactions
        
        Adds a call to `start_transaction(string,uint64)void` ABI method
        
        :param str invoice_id: The invoice id to use to initiate the transaction
        :param int total_products_amount: The total amount of algos charge by the seller
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = StartTransactionArgs(
            invoice_id=invoice_id,
            total_products_amount=total_products_amount,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class EscrowPlatformClient:
    """
        A Smart contracts for Decentralized Escrow management
        
    
    A class for interacting with the EscrowPlatform app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        EscrowPlatformClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def make_payment(
        self,
        *,
        buyer_payment: TransactionWithSigner,
        company_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Buyers makes payment to the escrow
        
        Calls `make_payment(pay,address)uint64` ABI method
        
        :param TransactionWithSigner buyer_payment: The payment transfer to the escrow in microalgos
        :param str company_address: The `company_address` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The total amount transferred by the buyer"""

        args = MakePaymentArgs(
            buyer_payment=buyer_payment,
            company_address=company_address,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def claim_refund(
        self,
        *,
        shipping_status: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Refund a buyer if the shipping is False
        
        Calls `claim_refund(string)uint64` ABI method
        
        :param str shipping_status: API endpoint from the shipping company
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The amount of MicroAlgos refunded."""

        args = ClaimRefundArgs(
            shipping_status=shipping_status,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw_funds_from_escrow(
        self,
        *,
        buyer_account: str,
        shipping_status: str,
        company_address: str,
        is_finance: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """deletes the buyer's escrow and transfers its balance to the application creator
        
        Calls `withdraw_funds_from_escrow(address,string,address,bool)uint64` ABI method
        
        :param str buyer_account: The buyer's address
        :param str shipping_status: comfirming from the shipping company if the product is delievered
        :param str company_address: The address to send charges to
        :param bool is_finance: The `is_finance` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = WithdrawFundsFromEscrowArgs(
            buyer_account=buyer_account,
            shipping_status=shipping_status,
            company_address=company_address,
            is_finance=is_finance,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def request_invoice_financing(
        self,
        *,
        buyer_account: str,
        shipping_status: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """pays the seller some percentage of Algo's
        
        Calls `request_invoice_financing(address,string)uint64` ABI method
        
        :param str buyer_account: The buyer's address
        :param str shipping_status: comfirming from the shipping company if the product is shipped
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = RequestInvoiceFinancingArgs(
            buyer_account=buyer_account,
            shipping_status=shipping_status,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_start_transaction(
        self,
        *,
        invoice_id: str,
        total_products_amount: int,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Creates a new transactions
        
        Calls `start_transaction(string,uint64)void` ABI method
        
        :param str invoice_id: The invoice id to use to initiate the transaction
        :param int total_products_amount: The total amount of algos charge by the seller
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = StartTransactionArgs(
            invoice_id=invoice_id,
            total_products_amount=total_products_amount,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[StartTransactionArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[StartTransactionArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
