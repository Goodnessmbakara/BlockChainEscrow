{
    "hints": {
        "start_transaction(string,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "make_payment(pay,address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_refund(string)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_funds_from_escrow(address,string,address,bool)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "request_invoice_financing(address,string)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZXNjcm93X3BsYXRmb3JtLmNvbnRyYWN0LkVzY3Jvd1BsYXRmb3JtLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93X3BsYXRmb3JtL2NvbnRyYWN0LnB5OjE4OAogICAgLy8gY2xhc3MgRXNjcm93UGxhdGZvcm0oQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "invoice_id": {
                    "type": "bytes",
                    "key": "invoice_id"
                },
                "total_products_amount": {
                    "type": "uint64",
                    "key": "total_products_amount"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "EscrowPlatform",
        "desc": "\n    A Smart contracts for Decentralized Escrow management\n    ",
        "methods": [
            {
                "name": "start_transaction",
                "args": [
                    {
                        "type": "string",
                        "name": "invoice_id",
                        "desc": "The invoice id to use to initiate the transaction"
                    },
                    {
                        "type": "uint64",
                        "name": "total_products_amount",
                        "desc": "The total amount of algos charge by the seller"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Creates a new transactions"
            },
            {
                "name": "make_payment",
                "args": [
                    {
                        "type": "pay",
                        "name": "buyer_payment",
                        "desc": "The payment transfer to the escrow in microalgos"
                    },
                    {
                        "type": "address",
                        "name": "company_address"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The total amount transferred by the buyer"
                },
                "desc": "Buyers makes payment to the escrow"
            },
            {
                "name": "claim_refund",
                "args": [
                    {
                        "type": "string",
                        "name": "shipping_status",
                        "desc": "API endpoint from the shipping company"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The amount of MicroAlgos refunded."
                },
                "desc": "Refund a buyer if the shipping is False"
            },
            {
                "name": "withdraw_funds_from_escrow",
                "args": [
                    {
                        "type": "address",
                        "name": "buyer_account",
                        "desc": "The buyer's address"
                    },
                    {
                        "type": "string",
                        "name": "shipping_status",
                        "desc": "comfirming from the shipping company if the product is delievered"
                    },
                    {
                        "type": "address",
                        "name": "company_address",
                        "desc": "The address to send charges to"
                    },
                    {
                        "type": "bool",
                        "name": "is_finance"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "deletes the buyer's escrow and transfers its balance to the application creator"
            },
            {
                "name": "request_invoice_financing",
                "args": [
                    {
                        "type": "address",
                        "name": "buyer_account",
                        "desc": "The buyer's address"
                    },
                    {
                        "type": "string",
                        "name": "shipping_status",
                        "desc": "comfirming from the shipping company if the product is shipped"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "pays the seller some percentage of Algo's"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}